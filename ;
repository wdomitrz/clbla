import STD

-- Positive Integers and 0
data Nat = S Nat | Zero

one :: Nat
one = S Zero
two :: Nat
two = S one
three :: Nat
three = S two
four :: Nat
four = S three

(+) :: Nat -> Nat -> Nat
(+) = foldNat S

-- Predecessor of 0 is 0
pred :: Nat -> Nat
pred = fstNat . foldNat (s PNats S . sndNat) (PNats Zero Zero)
    where
        -- Hasnell cannot do this
        data NatsPair = PNats Nat Nat
        fstNat :: NatsPair -> Nat
        fstNat = foldNatsPair k
        sndNat :: NatsPair -> Nat
        sndNat = foldNatsPair (c k)

-- a - b = max(a - b, 0)
(-) :: Nat -> Nat -> Nat
(-) = foldNat pred

{# LANGUAGE FOn #}
{# LANGUAGE NElim #}

import STD
import Bool
import Pair

-- Positive Integers and 0
data Nat = S Nat | Zero

zero :: Nat
zero = Zero
one :: Nat
one = S Zero
two :: Nat
two = S one
three :: Nat
three = S two
four :: Nat
four = S three

(+) :: Nat -> Nat -> Nat
(+) = foldNat S

-- Predecessor of 0 is 0
pred :: Nat -> Nat
-- It is an inefficient implementation, but using only folds. An efficient one
-- using eliminator:
-- pred = elimNat i zero
pred = fstNat . foldNat (s PNats S . sndNat) (PNats Zero Zero)
    where
        -- Hasnell cannot do this
        data NatsPair = PNats Nat Nat
        fstNat :: NatsPair -> Nat
        fstNat = foldNatsPair k
        sndNat :: NatsPair -> Nat
        sndNat = foldNatsPair (c k)

-- a - b = max(a - b, 0)
(-) :: Nat -> Nat -> Nat
(-) = foldNat pred

isZero :: Nat -> Bool
isZero = foldNat (k False) True

(<=) :: Nat -> Nat -> Bool
(<=) = b isZero `b` (-)
(>=) :: Nat -> Nat -> Bool
(>=) = c (<=)
(<) :: Nat -> Nat -> Bool
(<) = (<=) `b` S
(>) :: Nat -> Nat -> Bool
(>) = c (<)

(*) :: Nat -> Nat -> Nat
(*) = c foldNat zero `b` (+)

-- The division by 0 loops by design
-- The result of x / y is floor of x / y.
(/) :: Nat -> Nat -> Nat
-- Slower version
-- (/) = s (s `b` c c zero `b` (b if) `b` (<)) ((b S) `b` w `b` (b (/)) `b` (-))
-- Faster version (with accumulated result) (this implementation is still
-- inefficient because of usage of (-). It would be efficient if pred was
-- implemented using eliminator.)
(/) =
    let go :: Nat -> Nat -> Nat -> Nat
        go = s (s `b` b b `b` c (if `b` isZero))
               (c c i `b` b s `b` b' (-) `b` b `b` go `b` S)
    in  w `b` b (go zero) `b` (-) `b` S

(^) :: Nat -> Nat -> Nat
(^) = c foldNat one `b` (*)

factorial :: Nat -> Nat
-- I can also use polymorphic Pair
factorial = fst `b` foldNat go (Pair one one)
  where
    go :: Pair Nat Nat -> Pair Nat Nat
    go = s (Pair `b` lift2 (*) fst snd) (S `b` snd)

fib :: Nat -> Nat
fib = fst `b` foldNat (elimPair go) (Pair zero one)
  where
    go :: Nat -> Nat -> Pair Nat Nat
    go = s Pair `b` (+)

-- This implementation is inefficient but only because of using fold instead of
-- eliminator in pred implementation.
ackerman :: Nat -> Nat -> Nat
ackerman = fst . foldNat go (Pair S one)
  where
    go :: Pair (Nat -> Nat) Nat -> Pair (Nat -> Nat) Nat
    go = lift2 Pair go' (S `b` snd)
    go' = s (s `b` c (if `b` isZero) `b` c fst one)
            (lift2 b fst (b' pred `b` ackerman `b` snd))

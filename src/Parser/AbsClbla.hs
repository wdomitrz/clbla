

module Parser.AbsClbla where

-- Haskell module generated by the BNF converter




newtype UIdent = UIdent String deriving (Eq, Ord, Show, Read)
newtype LIdent = LIdent String deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameA = InfixFunctionNameA String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameB = InfixFunctionNameB String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameC = InfixFunctionNameC String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameD = InfixFunctionNameD String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameE = InfixFunctionNameE String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameF = InfixFunctionNameF String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameG = InfixFunctionNameG String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameH = InfixFunctionNameH String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameI = InfixFunctionNameI String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameJ = InfixFunctionNameJ String
  deriving (Eq, Ord, Show, Read)
newtype InfixFunctionNameK = InfixFunctionNameK String
  deriving (Eq, Ord, Show, Read)
data Programme = Prog [Extension] [Import] Environment
  deriving (Eq, Ord, Show, Read)

data Extension = Ext UIdent
  deriving (Eq, Ord, Show, Read)

data Import = Imp UIdent
  deriving (Eq, Ord, Show, Read)

data Environment = Env [Instruction]
  deriving (Eq, Ord, Show, Read)

data Instruction
    = InstructionTypeDefinition TypeDefinition
    | InstructionFunctionDeclaration FunctionDeclaration
    | InstructionFunctionDefinition FunctionDefinition
  deriving (Eq, Ord, Show, Read)

data TypeDefinition = TDef UIdent [Parameter] [TypeConstructor]
  deriving (Eq, Ord, Show, Read)

data Parameter = ParamVar LIdent
  deriving (Eq, Ord, Show, Read)

data TypeConstructor
    = TConst UIdent [Type]
    | TConstEmpty UIdent
    | TInfixConst Type TypeInfixConstructorName [Type]
  deriving (Eq, Ord, Show, Read)

data Type
    = TFun Type Type
    | TNamed UIdent [Type]
    | TNamedNoParam UIdent
    | TVar LIdent
  deriving (Eq, Ord, Show, Read)

data FunctionDeclaration = FDecl FunctionBaseName Type
  deriving (Eq, Ord, Show, Read)

data FunctionDefinition
    = FDef FunctionBaseName Expression
    | FDefWhere FunctionBaseName Expression Environment
  deriving (Eq, Ord, Show, Read)

data Expression
    = EOpA Expression InfixFunctionNameA Expression
    | EOpB Expression InfixFunctionNameB Expression
    | EOpC Expression InfixFunctionNameC Expression
    | EOpD Expression InfixFunctionNameD Expression
    | EOpE Expression InfixFunctionNameE Expression
    | EOpF Expression InfixFunctionNameF Expression
    | EOpG Expression InfixFunctionNameG Expression
    | EOpH Expression InfixFunctionNameH Expression
    | EOpI Expression InfixFunctionNameI Expression
    | EOpJ Expression InfixFunctionNameJ Expression
    | EOpK Expression InfixFunctionNameK Expression
    | ELet Environment Expression
    | EApp Expression Expression
    | EVar FunctionName
  deriving (Eq, Ord, Show, Read)

data FunctionBaseName = FBName LIdent | FIBName FunctionInfixName
  deriving (Eq, Ord, Show, Read)

data FunctionName
    = FName FunctionBaseName
    | FTCName UIdent
    | FITCName TypeInfixConstructorName
  deriving (Eq, Ord, Show, Read)

data FunctionInfixName
    = FunctionInfixNameInfixFunctionNameA InfixFunctionNameA
    | FunctionInfixNameInfixFunctionNameB InfixFunctionNameB
    | FunctionInfixNameInfixFunctionNameC InfixFunctionNameC
    | FunctionInfixNameInfixFunctionNameD InfixFunctionNameD
    | FunctionInfixNameInfixFunctionNameE InfixFunctionNameE
    | FunctionInfixNameInfixFunctionNameG InfixFunctionNameG
    | FunctionInfixNameInfixFunctionNameH InfixFunctionNameH
    | FunctionInfixNameInfixFunctionNameI InfixFunctionNameI
    | FunctionInfixNameInfixFunctionNameJ InfixFunctionNameJ
    | FunctionInfixNameInfixFunctionNameK InfixFunctionNameK
  deriving (Eq, Ord, Show, Read)

data TypeInfixConstructorName = TIConstName InfixFunctionNameF
  deriving (Eq, Ord, Show, Read)


module Parser.SkelClbla where

-- Haskell module generated by the BNF converter

import Parser.AbsClbla
import Parser.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent string -> failure x
transInfixFunctionNameA :: InfixFunctionNameA -> Result
transInfixFunctionNameA x = case x of
  InfixFunctionNameA string -> failure x
transInfixFunctionNameB :: InfixFunctionNameB -> Result
transInfixFunctionNameB x = case x of
  InfixFunctionNameB string -> failure x
transInfixFunctionNameC :: InfixFunctionNameC -> Result
transInfixFunctionNameC x = case x of
  InfixFunctionNameC string -> failure x
transInfixFunctionNameD :: InfixFunctionNameD -> Result
transInfixFunctionNameD x = case x of
  InfixFunctionNameD string -> failure x
transInfixFunctionNameE :: InfixFunctionNameE -> Result
transInfixFunctionNameE x = case x of
  InfixFunctionNameE string -> failure x
transInfixFunctionNameF :: InfixFunctionNameF -> Result
transInfixFunctionNameF x = case x of
  InfixFunctionNameF string -> failure x
transInfixFunctionNameG :: InfixFunctionNameG -> Result
transInfixFunctionNameG x = case x of
  InfixFunctionNameG string -> failure x
transInfixFunctionNameH :: InfixFunctionNameH -> Result
transInfixFunctionNameH x = case x of
  InfixFunctionNameH string -> failure x
transInfixFunctionNameI :: InfixFunctionNameI -> Result
transInfixFunctionNameI x = case x of
  InfixFunctionNameI string -> failure x
transInfixFunctionNameJ :: InfixFunctionNameJ -> Result
transInfixFunctionNameJ x = case x of
  InfixFunctionNameJ string -> failure x
transInfixFunctionNameK :: InfixFunctionNameK -> Result
transInfixFunctionNameK x = case x of
  InfixFunctionNameK string -> failure x
transProgramme :: Programme -> Result
transProgramme x = case x of
  Prog extensions imports environment -> failure x
transExtension :: Extension -> Result
transExtension x = case x of
  Ext uident -> failure x
transImport :: Import -> Result
transImport x = case x of
  Imp uident -> failure x
transEnvironment :: Environment -> Result
transEnvironment x = case x of
  Env instructions -> failure x
transInstruction :: Instruction -> Result
transInstruction x = case x of
  InstructionTypeDefinition typedefinition -> failure x
  InstructionFunctionDeclaration functiondeclaration -> failure x
  InstructionFunctionDefinition functiondefinition -> failure x
transTypeDefinition :: TypeDefinition -> Result
transTypeDefinition x = case x of
  TDef uident parameters typeconstructors -> failure x
transParameter :: Parameter -> Result
transParameter x = case x of
  ParamVar lident -> failure x
transTypeConstructor :: TypeConstructor -> Result
transTypeConstructor x = case x of
  TConst uident types -> failure x
  TConstEmpty uident -> failure x
  TInfixConst type_ typeinfixconstructorname types -> failure x
transType :: Type -> Result
transType x = case x of
  TFun type_1 type_2 -> failure x
  TNamed uident types -> failure x
  TNamedNoParam uident -> failure x
  TVar lident -> failure x
transFunctionDeclaration :: FunctionDeclaration -> Result
transFunctionDeclaration x = case x of
  FDecl functionbasename type_ -> failure x
transFunctionDefinition :: FunctionDefinition -> Result
transFunctionDefinition x = case x of
  FDef functionbasename expression -> failure x
  FDefWhere functionbasename expression environment -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  EOpA expression1 infixfunctionnamea expression2 -> failure x
  EOpB expression1 infixfunctionnameb expression2 -> failure x
  EOpC expression1 infixfunctionnamec expression2 -> failure x
  EOpD expression1 infixfunctionnamed expression2 -> failure x
  EOpE expression1 infixfunctionnamee expression2 -> failure x
  EOpF expression1 infixfunctionnamef expression2 -> failure x
  EOpG expression1 infixfunctionnameg expression2 -> failure x
  EOpH expression1 infixfunctionnameh expression2 -> failure x
  EOpI expression1 infixfunctionnamei expression2 -> failure x
  EOpJ expression1 infixfunctionnamej expression2 -> failure x
  EOpK expression1 infixfunctionnamek expression2 -> failure x
  ELet environment expression -> failure x
  EApp expression1 expression2 -> failure x
  EVar functionname -> failure x
transFunctionBaseName :: FunctionBaseName -> Result
transFunctionBaseName x = case x of
  FBName lident -> failure x
  FIBName functioninfixname -> failure x
transFunctionName :: FunctionName -> Result
transFunctionName x = case x of
  FName functionbasename -> failure x
  FTCName uident -> failure x
  FITCName typeinfixconstructorname -> failure x
transFunctionInfixName :: FunctionInfixName -> Result
transFunctionInfixName x = case x of
  FunctionInfixNameInfixFunctionNameA infixfunctionnamea -> failure x
  FunctionInfixNameInfixFunctionNameB infixfunctionnameb -> failure x
  FunctionInfixNameInfixFunctionNameC infixfunctionnamec -> failure x
  FunctionInfixNameInfixFunctionNameD infixfunctionnamed -> failure x
  FunctionInfixNameInfixFunctionNameE infixfunctionnamee -> failure x
  FunctionInfixNameInfixFunctionNameG infixfunctionnameg -> failure x
  FunctionInfixNameInfixFunctionNameH infixfunctionnameh -> failure x
  FunctionInfixNameInfixFunctionNameI infixfunctionnamei -> failure x
  FunctionInfixNameInfixFunctionNameJ infixfunctionnamej -> failure x
  FunctionInfixNameInfixFunctionNameK infixfunctionnamek -> failure x
transTypeInfixConstructorName :: TypeInfixConstructorName -> Result
transTypeInfixConstructorName x = case x of
  TIConstName infixfunctionnamef -> failure x


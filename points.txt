Mój język ma zawierać
* polimorficzne, rekurencyjne typy algebraiczne z konstruktorami będącymi funkcjami i typy funkcyjne
* rekurencyjne funkcje wieloargumentowe wyższego rzędu
* pattern matching zawarty w elimnatorach, które mogą być dowolnie zagłębione
* statyczne wiązanie identyfikatorów
* statyczne typowanie
* biblioteczkę standardową korzystającą z udogodnień języka z implementacją
    * rozmaitych standardowych kombinatorów
    * Bool-i
    * Par
    * liczb Naturalnych
    * List polimorficznych
* niestandardowy pomysł:
    * bazowanie na kombinatorach S i K w celu pozbycia się labmda-abstrakcji
    * automatyczne eliminatory i foldy
        * ciekawy dowód/konstrukcję - jak zrobić eliminator z folda (niestety tracąc przy tym na wydajności)
* konstrukcje where i let in
* moduły
* rozszerzenia
* wielopryiorytetowe operatory infiksowe, konstruktory infiksowe

Po bardziej szczegółowy opis zachęcam zajrzeć do pliku clbla.pdf. Planuję również spróbować zrobić algorytm rekonstrukcji typów.

Po przykłady użycia są w folderze examples. Najciekawszy jest plik Nats.clbla.

Na tej podstawie wnioskuję o maksymalny wynik 30 punktów (lub 35 w przypadku zrobienia algorytmu rekonstrukcji typów).

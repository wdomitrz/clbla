module SkelClbla where

-- Haskell module generated by the BNF converter

import AbsClbla
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transUpperCaseString :: UpperCaseString -> Result
transUpperCaseString x = case x of
  UpperCaseString string -> failure x
transLowerCaseString :: LowerCaseString -> Result
transLowerCaseString x = case x of
  LowerCaseString string -> failure x
transEnviorment :: Enviorment -> Result
transEnviorment x = case x of
  Enviorment instructions -> failure x
transInstruction :: Instruction -> Result
transInstruction x = case x of
  InstructionTypeDefinition typedefinition -> failure x
  InstructionFunctionDefinition functiondefinition -> failure x
  InstructionFunctionDeclaration functiondeclaration -> failure x
transTypeDefinition :: TypeDefinition -> Result
transTypeDefinition x = case x of
  TypeDefinition typename parameters algebraictypebody -> failure x
transTypeName :: TypeName -> Result
transTypeName x = case x of
  TypeName uppercasestring -> failure x
transParameters :: Parameters -> Result
transParameters x = case x of
  Parameters variables -> failure x
transVariable :: Variable -> Result
transVariable x = case x of
  Variable lowercasestring -> failure x
transAlgebraicTypeBody :: AlgebraicTypeBody -> Result
transAlgebraicTypeBody x = case x of
  AlgebraicTypeBody algebraictypebodyelements -> failure x
transAlgebraicTypeBodyElement :: AlgebraicTypeBodyElement -> Result
transAlgebraicTypeBodyElement x = case x of
  AlgebraicTypeBodyElement typeconstructor types -> failure x
transTypeConstructor :: TypeConstructor -> Result
transTypeConstructor x = case x of
  TypeConstructor uppercasestring -> failure x
transType :: Type -> Result
transType x = case x of
  NamedType typename parameters -> failure x
  TypeVariable variable -> failure x
  FunctionType type_1 type_2 -> failure x
transFunctionDeclaration :: FunctionDeclaration -> Result
transFunctionDeclaration x = case x of
  FunctionDeclaration variable type_ -> failure x
transFunctionName :: FunctionName -> Result
transFunctionName x = case x of
  FunctionName variable -> failure x
transFunctionDefinition :: FunctionDefinition -> Result
transFunctionDefinition x = case x of
  FunctionDefinition variable expression -> failure x
transExpression :: Expression -> Result
transExpression x = case x of
  Application expression1 expression2 -> failure x
  VariableExp variable -> failure x


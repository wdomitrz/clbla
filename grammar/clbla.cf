entrypoints Programme;
layout toplevel;
layout "let", "where";
layout stop "in";

-- Programme base
Prog. Programme ::= [Extension] [Import] Environment;

terminator Extension ";";
Ext. Extension ::= "{# LANGUAGE" UIdent "#}";

terminator Import ";";
Imp. Import ::= "import" UIdent;

Env. Environment ::= [Instruction];

separator Instruction ";";
rules Instruction ::= TypeDefinition | FunctionDeclaration | FunctionDefinition;

-- Type definition
TDef. TypeDefinition ::= "data" UIdent [Parameter] "=" [TypeConstructor];

separator Parameter "";
ParamVar. Parameter ::= LIdent;

separator nonempty TypeConstructor "|";
TConst.      TypeConstructor ::= UIdent [Type2];
-- I have added the option of an empty contructor, because list of Type2 objects
-- is by default nonempty to avoid conflicts in grammar.
TConstEmpty. TypeConstructor ::= UIdent;
TInfixConst. TypeConstructor ::= Type TypeInfixConstructorName [Type2];

coercions Type 2;
separator nonempty Type2 "";
TFun.   Type  ::= Type1 "->" Type;
TNamed. Type1 ::= UIdent [Type2];
TNamedNoParam. Type2 ::= UIdent;
TVar.   Type2 ::= LIdent;

-- Function Definition and declaration
FDecl. FunctionDeclaration ::= FunctionBaseName "::" Type;

FDef. FunctionDefinition ::= FunctionBaseName "=" Expression;
FDefWhere. FunctionDefinition ::= FunctionBaseName "=" Expression "where" "{" Environment "}";

coercions Expression 12;
-- I keep the names of operators' constructors to have the possibility to
-- rebuild the generated tree using this informations
EOpA. Expression   ::=Expression1  InfixFunctionNameA Expression;
EOpB. Expression1  ::=Expression2  InfixFunctionNameB Expression1;
EOpC. Expression2  ::=Expression3  InfixFunctionNameC Expression2;
EOpD. Expression3  ::=Expression4  InfixFunctionNameD Expression3;
EOpE. Expression4  ::=Expression5  InfixFunctionNameE Expression4;
EOpF. Expression5  ::=Expression6  InfixFunctionNameF Expression5;
EOpG. Expression6  ::=Expression7  InfixFunctionNameG Expression6;
EOpH. Expression7  ::=Expression8  InfixFunctionNameH Expression7;
EOpI. Expression8  ::=Expression9  InfixFunctionNameI Expression8;
EOpJ. Expression9  ::=Expression10 InfixFunctionNameJ Expression9;
EOpK. Expression10 ::=Expression11 InfixFunctionNameK Expression10;

ELet. Expression1 ::= "let" "{" Environment "}" "in" Expression1;
EApp. Expression11 ::= Expression11 Expression12;
EVar. Expression12 ::= FunctionName;

-- Basic identifiers
token UIdent (upper (letter | digit | '_' | '\'' | '*')*);
token LIdent (lower (letter | digit | '_' | '\'' | '*')*);

-- Functions names
FBName. FunctionBaseName ::= LIdent;
FIBName. FunctionBaseName ::= "(" FunctionInfixName ")";
FName. FunctionName ::= FunctionBaseName;
FTCName. FunctionName ::= UIdent;
FITCName. FunctionName ::= "(" TypeInfixConstructorName ")";

rules FunctionInfixName ::= InfixFunctionNameA
                          | InfixFunctionNameB
                          | InfixFunctionNameC
                          | InfixFunctionNameD
                          | InfixFunctionNameE
                          | InfixFunctionNameG
                          | InfixFunctionNameH
                          | InfixFunctionNameI
                          | InfixFunctionNameJ
                          | InfixFunctionNameK;
token InfixFunctionNameA ('$' ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameB ('?' ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameC ('|' ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameD ('&' ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameE (('<' | '>' | '=') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameF (':' (':' | ["!#$%&*+/<=>?@^|-~:"] | '.')*);
token InfixFunctionNameG (('+' | '-') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameH (('*' | '/') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameI (('^') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameJ (('!' | '.') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNameK ('`' ((lower | upper) (letter | digit | '_' | '\'' | '*')*) '`');

-- Type names
TIConstName. TypeInfixConstructorName ::= InfixFunctionNameF; -- (':' (':' | InfixNameChar)*)

comment "--" ;
comment "{-" "-}" ;

entrypoints Programme;
layout toplevel;
layout "let", "where";
layout stop "in";

-- Programme base
Prog. Programme ::= [Extension] [Import] Environment;

terminator Extension ";";
Ext. Extension ::= "{-# LANGUAGE" Ident "#-}";

terminator Import ";";
Imp. Import ::= "import" Ident;

Env. Environment ::= [Instruction];

terminator Instruction ";";
rules Instruction ::= TypeDefinition | FunctionDeclaration | FunctionDefinition;

-- Type definition
TDef. TypeDefinition ::= "data" UIdent [Parameter] "=" [TypeConstructor];

separator Parameter "";
Param. Parameter ::= LIdent;

separator nonempty TypeConstructor "|";
TConst. TypeConstructor ::= UIdent [Type];
TInfixConst. TypeConstructor ::= Type TypeInfixConstructorName [Type];

separator Type "";
TFun. Type ::= Type "->" Type1;
TNamed. Type1 ::= UIdent [Parameter];
TVar. Type2 ::= LIdent;
_. Type ::= Type1;
_. Type1 ::= Type2;
_. Type2 ::= "(" Type ")";

-- Function Definition and declaration
FDecl. FunctionDeclaration ::= LIdent "::" Type;

FDefNoWhere. FunctionDefinition ::= LIdent "=" Expression;
FDefWithWhere. FunctionDefinition ::= LIdent "=" Expression "where" Environment;

coercions Expression 16;
EOp0.  Expression   ::= Expression   InfixFunctionNameP Expression1;
EOp1.  Expression1  ::= Expression1  InfixFunctionNamePP Expression2;
EOp2.  Expression2  ::= Expression2  InfixFunctionNamePPP Expression3;
EOp3.  Expression3  ::= Expression3  InfixFunctionNamePPPP Expression4;
EOp4.  Expression4  ::= Expression4  InfixFunctionNamePPPPP Expression5;
EOp5.  Expression5  ::= Expression5  InfixFunctionNamePPPPPP Expression6;
EOp6.  Expression6  ::= Expression6  InfixFunctionNamePPPPPPP Expression7;
EOp7.  Expression7  ::= Expression7  InfixFunctionNamePPPPPPPP Expression8;
EOp8.  Expression8  ::= Expression8  InfixFunctionNamePPPPPPPPP Expression9;
EOp9.  Expression9  ::= Expression9  InfixFunctionNamePPPPPPPPPP Expression10;
EOp10. Expression10 ::= Expression10 InfixFunctionNamePPPPPPPPPPP Expression11;

ELet. Expression1 ::= "let" Environment "in" Expression1;
EApp. Expression11 ::= Expression11 Expression12;
EVar. Expression12 ::= FunctionName;

_. Expression ::= Expression1;
_. Expression1 ::= Expression2;
_. Expression2 ::= Expression3;
_. Expression3 ::= Expression4;
_. Expression4 ::= Expression5;
_. Expression5 ::= Expression6;
_. Expression6 ::= Expression7;
_. Expression7 ::= Expression8;
_. Expression8 ::= Expression9;
_. Expression9 ::= Expression10;
_. Expression10 ::= Expression11;
_. Expression11 ::= Expression12;
_. Expression12 ::= "(" Expression ")";

-- Basic identifiers
token UIdent (upper (letter | digit | '_' | '\'' | '*')*);
token LIdent (lower (letter | digit | '_' | '\'' | '*')*);
token InfixNameChar (["!#$%&*+/<=>?@^|-~:"] | '.');

-- Functions names
FName. FunctionName ::= LIdent;
FIName. FunctionName ::= "(" FunctionInfixName")";
rules FunctionInfixName ::= InfixFunctionNameP
                          | InfixFunctionNamePP
                          | InfixFunctionNamePPP
                          | InfixFunctionNamePPPP
                          | InfixFunctionNamePPPPP
                          | InfixFunctionNamePPPPPP
                          | InfixFunctionNamePPPPPPP
                          | InfixFunctionNamePPPPPPPP
                          | InfixFunctionNamePPPPPPPPP
                          | InfixFunctionNamePPPPPPPPPP
                          | InfixFunctionNamePPPPPPPPPPP;
token InfixFunctionNameP ('$' ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePP ('?' ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePPP ('|' ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePPPP ('&' ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePPPPP (('<' | '>' | '=') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePPPPPP (':' (':' | ["!#$%&*+/<=>?@^|-~:"] | '.')*);
token InfixFunctionNamePPPPPPP (('+' | '-') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePPPPPPPP (('*' | '/') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePPPPPPPPP (('^') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePPPPPPPPPP (('!' | '.') ((["!#$%&*+/<=>?@^|-~:"] | '.')*));
token InfixFunctionNamePPPPPPPPPPP ('`' (lower (letter | digit | '_' | '\'' | '*')*) '`');

-- Type names
token TypeInfixConstructorName (':' (':' | ["!#$%&*+/<=>?@^|-~:"] | '.')*); -- (':' (':' | InfixNameChar)*)

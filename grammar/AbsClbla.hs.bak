-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsClbla where

newtype UpperCaseString = UpperCaseString String
  deriving (Eq, Ord, Show, Read)

newtype LowerCaseString = LowerCaseString String
  deriving (Eq, Ord, Show, Read)

data Enviorment = Enviorment [Instruction]
  deriving (Eq, Ord, Show, Read)

data Instruction
    = InstructionTypeDefinition TypeDefinition
    | InstructionFunctionDefinition FunctionDefinition
    | InstructionFunctionDeclaration FunctionDeclaration
  deriving (Eq, Ord, Show, Read)

data TypeDefinition
    = TypeDefinition TypeName Parameters AlgebraicTypeBody
  deriving (Eq, Ord, Show, Read)

data TypeName = TypeName UpperCaseString
  deriving (Eq, Ord, Show, Read)

data Parameters = Parameters [Variable]
  deriving (Eq, Ord, Show, Read)

data Variable = Variable LowerCaseString
  deriving (Eq, Ord, Show, Read)

data AlgebraicTypeBody
    = AlgebraicTypeBody [AlgebraicTypeBodyElement]
  deriving (Eq, Ord, Show, Read)

data AlgebraicTypeBodyElement
    = AlgebraicTypeBodyElement TypeConstructor [Type]
  deriving (Eq, Ord, Show, Read)

data TypeConstructor = TypeConstructor UpperCaseString
  deriving (Eq, Ord, Show, Read)

data Type
    = NamedType TypeName Parameters
    | TypeVariable Variable
    | FunctionType Type Type
  deriving (Eq, Ord, Show, Read)

data FunctionDeclaration = FunctionDeclaration Variable Type
  deriving (Eq, Ord, Show, Read)

data FunctionName = FunctionName Variable
  deriving (Eq, Ord, Show, Read)

data FunctionDefinition = FunctionDefinition Variable Expression
  deriving (Eq, Ord, Show, Read)

data Expression
    = Application Expression Expression | VariableExp Variable
  deriving (Eq, Ord, Show, Read)

